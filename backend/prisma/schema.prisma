// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL") 
}

model User {
  id String @id @default(uuid())
  email String @unique
  societyId Int 
  phoneNumber String @unique
  firstName String
  lastName String?
  password String
  role     Int @default(5) //member
  userrole Userrole @relation(fields: [role], references: [id], onDelete: SetNull)
  status String @default("active")
  createdAt DateTime @default(now())
  isVerified Boolean @default(false)

  society Society @relation(fields: [societyId], references: [id], onDelete: SetNull)
  
  creatorUser      Task[] @relation("CreatorUser")   // Tasks created by this user
  assignedUser Task[]  @relation("AssignedUser")   // Tasks created by this user
  comments   TaskComment[]
  polls Poll[]
  poleVotes PoleVote[]
}

model Society {
  id Int @id @default(autoincrement())
  name String
  status String @default("active")
  createdAt DateTime @default(now())
  address String

  users User[]  // Define the one-to-many side of the relationship
  tasks     Task[]  // Tasks related to the society
}

model Userrole {
  id Int @id 
  role String
  type String?

  users User[] //one user role can be associated with the multiple users
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  assignedTo  String?      // Nullable, task can be unassigned
  assignedUser User?    @relation("AssignedUser",fields: [assignedTo], references: [id])
  createdBy   String       // User who created the task
  creatorUser     User      @relation("CreatorUser", fields: [createdBy], references: [id])
  statusId    Int       @default(1) // Defaults to Open
  status      TaskStatus @relation(fields: [statusId], references: [id])
  priorityId  Int       @default(3) // Default priority to Low
  priority    Priority  @relation(fields: [priorityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  societyId   Int       // Related to a society
  society     Society   @relation(fields: [societyId], references: [id], onDelete: Cascade)

  // Optional relation for task comments
  comments    TaskComment[]
}

model TaskStatus {
  id   Int     @id @default(autoincrement())
  name String  // Status name like "Open", "Closed", etc.
  tasks Task[] // Relation to tasks
}

model Priority {
  id     Int    @id @default(autoincrement())
  name   String // Priority name like "High", "Medium", "Low"
  level  Int    // For ordering, e.g., High = 1, Medium = 2, Low = 3
  tasks  Task[] // Relation to tasks
}

model TaskComment {
  id        Int      @id @default(autoincrement())
  content   String   // Comment content
  createdAt DateTime @default(now())
  taskId    Int      // Foreign key to task
  task      Task     @relation(fields: [taskId], references: [id])
  createdBy String      // User who created the comment
  author    User     @relation(fields: [createdBy], references: [id])
}

model Poll {
  id          Int       @id @default(autoincrement())
  question String?
  status String? @default("Open")
  createdAt DateTime @default(now())
  createdBy String
  creatorUser User @relation(fields: [createdBy], references: [id])

  poleOptions PoleOption[]
  poleVotes PoleVote[]
}

model PoleOption {
  id Int @id @default(autoincrement())
  pollId Int
  pollOption String
  poll Poll @relation(fields: [pollId], references: [id])
  poleVotes PoleVote[]
}

model PoleVote {
  id Int @id @default(autoincrement())
  pollId Int
  poleOptionId Int
  userId String
  createdAt DateTime @default(now())

  poll Poll @relation(fields: [pollId], references: [id])
  poleOption PoleOption @relation(fields: [poleOptionId], references: [id])
  user User @relation(fields: [userId], references: [id])
}


